document()
document()
#' Quickly plot faceted volume of groups over time
#'
#' @param df Data frame or tibble
#' @param group_var grouping variable e.g. country, cluster, topic etc.
#' @param date_var Variable which contains date information (can be datetime too I think)
#' @param unit Time unit fed into lubridate::floor_date e.g. "week", "day", "month", "second", "quarter", "year"
#' @param nrow How many rows the plot should be shown in
#'
#' @return ggplot object of facetted bar charts
#' @export
plot_group_vol_time <- function(df, group_var = group, date_var = date, unit = "week", nrow = 2){
date_sym <- rlang::ensym(date_var)
group_sym <- rlang::ensym(group_var)
df <- df %>% dplyr::mutate(plot_date = lubridate::floor_date(!!date_sym, unit = unit),
facet_var = !!group_sym)
df %>%
dplyr::count(plot_date, facet_var) %>%
ggplot2::ggplot(ggplot2::aes(x = plot_date, y = n, fill = facet_var)) +
ggplot2::geom_col() +
ggplot2::theme_minimal() +
ggplot2::scale_x_date(date_breaks = "1 months", date_labels = "%d-%b") +
ggplot2::theme(legend.position = "none",
axis.text.x = element_text(angle = 90)) +
ggplot2::labs(title = "Topic Volume over Time", x = NULL, y = "Number of Posts") +
ggplot2::facet_wrap(~facet_var, nrow = nrow)
}
document()
rm(list=ls())
document
document()
document()
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
document()
check()
library(JPackage)
document()
document()
library(shiny)
library(tidyverse)
library(shinythemes)
ui <- navbarPage("Conversation Mapping", theme = shinytheme("cosmo"),
#----  Tab 1 ----
tabPanel("Plot", fluidPage(theme = shinytheme('superhero')),
fluidRow(
shiny::column(2, shiny::checkboxGroupInput("boxGroup", "Select Your Choices", choices = c("Hello", "Good Bye"))),
shiny::column(2, shiny::textAreaInput("textInput", "Write what you want"))
),
shiny::hr(),
fluidRow(
shiny::column(2, shiny::passwordInput("password", "Enter Password", placeholder = "type..."))
),
),
#---- Tab 2 ----
tabPanel("Stuff", fluidPage(theme = shinytheme('superhero')),
fluidRow(
shiny::column(2, shiny::sliderInput("selectRange", label = "Select a Range", min = 20, max = 50, value = 30, step = 5))
),
),
)
server <- function(input, output, session){}
shiny::shinyApp(ui, server)
ui <-  shiny::navbarPage("Conversation Mapping", theme = shinythemes::shinytheme("cosmo"),
shiny::tabPanel("Plot", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::textInput("remainingName", "File Name", "data_cleaned")),
shiny::column(1, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadAll", "Download All Data", class = "btn btn-success")))),
shiny::br(),
#----Tab 1 Row 1 ----
shiny::fluidRow(
shiny::column(2, shiny::sliderInput( "x1","V1 Range", step = 5, -100, 100, c(-20, 20))),
shiny::column(2, shiny::sliderInput( "y1","V2 Range", step = 5, -100, 100, c(-20, 20)))),
shiny::br(),
#---- Tab 1 Row 2 ----
shiny::fluidRow(
shiny::column(2, shiny::textInput("Regex", "Pattern to filter",  value = NULL)),
shiny::column(2, shiny::textInput("fileName", "File Name", "mydata")),
shiny::column(2, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadData", "Download Selections", class = "btn btn-success"))),
shiny::column(1, offset = 0, shiny::div(style = "margin-top: 20px;", shiny::actionButton("delete", "Delete selections", class = 'btn-danger'))),
shiny::column(2, offset = 1, shiny::numericInput("n", "Posts shown per page", 10, min = 1, max = 200))),
shiny::br(),
#----- Tab 1 Row 3 ----
shiny::fluidRow(
shiny::column(7,
plotly::plotlyOutput("umapPlot")),
shiny::column(5,
DT::dataTableOutput("highlightedTable")),
),
#---- Hide second Tab  -----
shiny::tabPanel("Stuff", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::sliderInput("selectRange", label = "Select a Range", min = 20, max = 50, value = 30, step = 5))
),
),
),
)
server <- function(input, output, session){}
shiny::shinyApp(ui, server)
ui <-  shiny::navbarPage("Conversation Mapping", theme = shinythemes::shinytheme("cosmo"),
shiny::tabPanel("Plot", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::textInput("remainingName", "File Name", "data_cleaned")),
shiny::column(1, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadAll", "Download All Data", class = "btn btn-success")))),
shiny::br(),
#----Tab 1 Row 1 ----
shiny::fluidRow(
shiny::column(2, shiny::sliderInput( "x1","V1 Range", step = 5, -100, 100, c(-20, 20))),
shiny::column(2, shiny::sliderInput( "y1","V2 Range", step = 5, -100, 100, c(-20, 20)))),
shiny::br(),
#---- Tab 1 Row 2 ----
shiny::fluidRow(
shiny::column(2, shiny::textInput("Regex", "Pattern to filter",  value = NULL)),
shiny::column(2, shiny::textInput("fileName", "File Name", "mydata")),
shiny::column(2, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadData", "Download Selections", class = "btn btn-success"))),
shiny::column(1, offset = 0, shiny::div(style = "margin-top: 20px;", shiny::actionButton("delete", "Delete selections", class = 'btn-danger'))),
shiny::column(2, offset = 1, shiny::numericInput("n", "Posts shown per page", 10, min = 1, max = 200))),
shiny::br(),
#----- Tab 1 Row 3 ----
shiny::fluidRow(
shiny::column(7,
plotly::plotlyOutput("umapPlot")),
shiny::column(5,
DT::dataTableOutput("highlightedTable"))
),
#---- Hide second Tab  -----
shiny::tabPanel("Stuff", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::sliderInput("selectRange", label = "Select a Range", min = 20, max = 50, value = 30, step = 5))
),
),
),
)
server <- function(input, output, session){}
shiny::shinyApp(ui, server)
ui <-  shiny::navbarPage("Conversation Mapping", theme = shinythemes::shinytheme("cosmo"),
shiny::tabPanel("Plot", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::textInput("remainingName", "File Name", "data_cleaned")),
shiny::column(1, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadAll", "Download All Data", class = "btn btn-success")))),
shiny::br(),
#----Tab 1 Row 1 ----
shiny::fluidRow(
shiny::column(2, shiny::sliderInput( "x1","V1 Range", step = 5, -100, 100, c(-20, 20))),
shiny::column(2, shiny::sliderInput( "y1","V2 Range", step = 5, -100, 100, c(-20, 20)))),
shiny::br(),
#---- Tab 1 Row 2 ----
shiny::fluidRow(
shiny::column(2, shiny::textInput("Regex", "Pattern to filter",  value = NULL)),
shiny::column(2, shiny::textInput("fileName", "File Name", "mydata")),
shiny::column(2, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadData", "Download Selections", class = "btn btn-success"))),
shiny::column(1, offset = 0, shiny::div(style = "margin-top: 20px;", shiny::actionButton("delete", "Delete selections", class = 'btn-danger'))),
shiny::column(2, offset = 1, shiny::numericInput("n", "Posts shown per page", 10, min = 1, max = 200))),
shiny::br(),
#----- Tab 1 Row 3 ----
shiny::fluidRow(
shiny::column(7,
plotly::plotlyOutput("umapPlot")),
shiny::column(5,
DT::dataTableOutput("highlightedTable"))),),
shiny::tabPanel("Stuff", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::sliderInput("selectRange", label = "Select a Range", min = 20, max = 50, value = 30, step = 5))
),
),)
server <- function(input, output, session){}
shiny::shinyApp(ui, server)
ui <-  shiny::navbarPage("Conversation Mapping", theme = shinythemes::shinytheme("cosmo"),
#---- hide Tab 1 ----
shiny::tabPanel("Conversation Map", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::textInput("remainingName", "File Name", "data_cleaned")),
shiny::column(1, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadAll", "Download All Data", class = "btn btn-success")))),
shiny::br(),
#----Tab 1 Row 1 ----
shiny::fluidRow(
shiny::column(2, shiny::sliderInput( "x1","V1 Range", step = 5, -100, 100, c(-20, 20))),
shiny::column(2, shiny::sliderInput( "y1","V2 Range", step = 5, -100, 100, c(-20, 20)))),
shiny::br(),
#---- Tab 1 Row 2 ----
shiny::fluidRow(
shiny::column(2, shiny::textInput("Regex", "Pattern to filter",  value = NULL)),
shiny::column(2, shiny::textInput("fileName", "File Name", "mydata")),
shiny::column(2, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadData", "Download Selections", class = "btn btn-success"))),
shiny::column(1, offset = 0, shiny::div(style = "margin-top: 20px;", shiny::actionButton("delete", "Delete selections", class = 'btn-danger'))),
shiny::column(2, offset = 1, shiny::numericInput("n", "Posts shown per page", 10, min = 1, max = 200))),
shiny::br(),
#----- Tab 1 Row 3 ----
shiny::fluidRow(
shiny::column(7,
plotly::plotlyOutput("umapPlot")),
shiny::column(5,
DT::dataTableOutput("highlightedTable"))),),
#---- hide Tab 2 ----
shiny::tabPanel("Selected Conversation's Charts", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::sliderInput("selectRange", label = "Select a Range", min = 20, max = 50, value = 30, step = 5))),),
)
server <- function(input, output, session){}
shiny::shinyApp(ui, server)
ui <-  shiny::navbarPage("Conversation Mapping", theme = shinythemes::shinytheme("cyborg"),
#---- hide Tab 1 ----
shiny::tabPanel("Conversation Map", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::textInput("remainingName", "File Name", "data_cleaned")),
shiny::column(1, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadAll", "Download All Data", class = "btn btn-success")))),
shiny::br(),
#----Tab 1 Row 1 ----
shiny::fluidRow(
shiny::column(2, shiny::sliderInput( "x1","V1 Range", step = 5, -100, 100, c(-20, 20))),
shiny::column(2, shiny::sliderInput( "y1","V2 Range", step = 5, -100, 100, c(-20, 20)))),
shiny::br(),
#---- Tab 1 Row 2 ----
shiny::fluidRow(
shiny::column(2, shiny::textInput("Regex", "Pattern to filter",  value = NULL)),
shiny::column(2, shiny::textInput("fileName", "File Name", "mydata")),
shiny::column(2, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadData", "Download Selections", class = "btn btn-success"))),
shiny::column(1, offset = 0, shiny::div(style = "margin-top: 20px;", shiny::actionButton("delete", "Delete selections", class = 'btn-danger'))),
shiny::column(2, offset = 1, shiny::numericInput("n", "Posts shown per page", 10, min = 1, max = 200))),
shiny::br(),
#----- Tab 1 Row 3 ----
shiny::fluidRow(
shiny::column(7,
plotly::plotlyOutput("umapPlot")),
shiny::column(5,
DT::dataTableOutput("highlightedTable"))),),
#---- hide Tab 2 ----
shiny::tabPanel("Selected Conversation's Charts", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::sliderInput("selectRange", label = "Select a Range", min = 20, max = 50, value = 30, step = 5))),),
)
server <- function(input, output, session){}
shiny::shinyApp(ui, server)
ui <-  shiny::navbarPage("Conversation Mapping",
#---- hide Tab 1 ----
shiny::tabPanel("Conversation Map", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::textInput("remainingName", "File Name", "data_cleaned")),
shiny::column(1, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadAll", "Download All Data", class = "btn btn-success")))),
shiny::br(),
#----Tab 1 Row 1 ----
shiny::fluidRow(
shiny::column(2, shiny::sliderInput( "x1","V1 Range", step = 5, -100, 100, c(-20, 20))),
shiny::column(2, shiny::sliderInput( "y1","V2 Range", step = 5, -100, 100, c(-20, 20)))),
shiny::br(),
#---- Tab 1 Row 2 ----
shiny::fluidRow(
shiny::column(2, shiny::textInput("Regex", "Pattern to filter",  value = NULL)),
shiny::column(2, shiny::textInput("fileName", "File Name", "mydata")),
shiny::column(2, shiny::div(style = "margin-top: 20px;",shiny::downloadButton("downloadData", "Download Selections", class = "btn btn-success"))),
shiny::column(1, offset = 0, shiny::div(style = "margin-top: 20px;", shiny::actionButton("delete", "Delete selections", class = 'btn-danger'))),
shiny::column(2, offset = 1, shiny::numericInput("n", "Posts shown per page", 10, min = 1, max = 200))),
shiny::br(),
#----- Tab 1 Row 3 ----
shiny::fluidRow(
shiny::column(7,
plotly::plotlyOutput("umapPlot")),
shiny::column(5,
DT::dataTableOutput("highlightedTable"))),),
#---- hide Tab 2 ----
shiny::tabPanel("Selected Conversation's Charts", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::fluidRow(
shiny::column(2, shiny::sliderInput("selectRange", label = "Select a Range", min = 20, max = 50, value = 30, step = 5))),),
)
server <- function(input, output, session){}
shiny::shinyApp(ui, server)
document()
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
check()
library(JPackage)
user_r("umap_app_dev")
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
user_r("umap_app_dev")
use_r("app_dev")
umap_shiny_dev <- function(data,..., text_var, colour_var,  size = 2,umap_height = 600, x_var = V1, y_var = V2, type = "scattergl", colour_mapping = NULL){
#----- hide wrangling ----
text_sym <- rlang::ensym(text_var)
colour_sym <- rlang::ensym(colour_var)
data <- dplyr::mutate(data, original_id = dplyr::row_number())
data <- dplyr::relocate(data, {{x_var}},{{y_var}}, {{text_var}}, {{colour_var}}, original_id)
#Rename columns to avoid relying on tidy evaluate in server logic
data <- dplyr::rename(data, text_var = 3, colour_var = 4)
#---- hide UI ----
ui <-
shiny::navbarPage("Conversation Landscape", theme = shinythemes::shinytheme("cosmo"), position = "fixed-top",
shiny::tabPanel("Survey the Landscape",
#---- Tab 1 ----
shiny::br(),
shiny::fluidPage(
# shinythemes::themeSelector(),
theme = shinythemes::shinytheme(theme = "superhero"),
shiny::fluidRow(
shiny::column(2, shiny::textInput("remainingName", "File Name", value = NULL, placeholder = "filename excluding .csv")),
shiny::column(1, shiny::div(style = "margin-top: 25px;",shiny::downloadButton("downloadAll", "Download All Data", class = "btn btn-success")))
),
shiny::br(),
shiny::fluidRow(
shiny::column(2, shiny::sliderInput( "x1","V1 Range",step = 5,  -100, 100, c(-20, 20))),
shiny::column(2, shiny::sliderInput( "y1","V2 Range",step = 5, -100, 100, c(-20, 20)))
),
shiny::br(),
shiny::fluidRow(
shiny::column(2, shiny::textInput("fileName", "File Name", value = NULL, placeholder = "filename excluding .csv")),
shiny::column(2, shiny::div(style = "margin-top: 25px;",shiny::downloadButton("downloadData", "Download Selections",class = "btn btn-success" )))
),
shiny::br(),
shiny::fluidRow(
shiny::column(2, shiny::textInput("Regex", "Pattern to filter",  value = NULL)),
shiny::column(1, shiny::div(style = "margin-top: 25px;", shiny::actionButton("filterPattern", "Filter", class = "btn btn-primary"))),
shiny::column(1, shiny::div(style = "margin-top: 25px;", shiny::actionButton("reset", "Reset", class = "btn btn-light"))),
shiny::column(1, offset = 4, shiny::numericInput("n", "Posts per page", 10, min = 1, max = 200)),
shiny::column(1, shiny::div(style = "margin-top: 25px;", shiny::actionButton("delete", "Delete selections", class = 'btn-danger')))
),
shiny::br(),
shiny::fluidRow(
shiny::column(7,
plotly::plotlyOutput("umapPlot")
),
shiny::column(5,
DT::dataTableOutput("highlightedTable")
),
),
),),
#---- tab 2 ----
shiny::br(),
shiny::tabPanel("Summarise the Landscape", shiny::fluidPage(theme = shinythemes::shinytheme('superhero')),
shiny::p("In this tab you can view, and download if necessary, charts designed to help you understand your selections."),
shiny::fluidRow(
shiny::column(4,shiny::plotOutput("volumePlot", height = "400px")),
shiny::column(3,shiny::plotOutput("sentimentPlot", height = "400px")),
shiny::column(4,shiny::plotOutput("tokenPlot", height = "400px"))
),
shiny::br(),
shiny::p("Below you'll find a bigram network, this network will help you estimate how clean your selected data is."),
shiny::p("Remember that long and connected chains of words may represent spam or unwanted mentions."),
shiny::fluidRow(
shiny::column(8, shiny::plotOutput("bigramPlot", height = "600px"))
),
)
)
#---- Server ----
server <- function(input, output, session){
#--- Pattern ----
pattern <- shiny::reactiveVal(value = "",{})
shiny::observeEvent(input$filterPattern, {
pattern(input$Regex)
})
#--- Filter + Reset Pattern ----
shiny::observeEvent(input$reset, {
pattern(input$Regex)
updateTextInput(session, "Regex", value = "")
})
shiny::observeEvent(input$reset, {
pattern("")
})
#--- Delete IDS ----
#Get the original IDs saved and save an object for later adding selected points to remove
remove_range <- shiny::reactiveValues(
keep_keys = data$original_id,
remove_keys = NULL
)
#Update remove_range's values on delete button press
shiny::observeEvent(input$delete,{
req(length(remove_range$keep_keys) > 0)
remove_range$remove_keys <- selected_range()$key
remove_range$keep_keys <- remove_range$keep_keys[!remove_range$keep_keys %in% remove_range$remove_keys]
})
reactive_data <- shiny::reactive({
data <- data %>%
dplyr::filter(V1 > input$x1[[1]], V1 < input$x1[[2]], V2 > input$y1[[1]], V2 < input$y1[[2]]) %>%
dplyr::filter(!topic %in% input$cluster,
original_id %in% remove_range$keep_keys) %>%
dplyr::filter(grepl(pattern(), text, ignore.case = TRUE)) %>%
dplyr::mutate(plot_id = dplyr::row_number())
})
#--- UMAP Plot ----
output$umapPlot = plotly::renderPlotly({
#cluster can be changed
reactive_data() %>%
plotly::plot_ly(x = ~V1, y = ~V2,
type = type,
color = ~topic,
colors = colour_mapping,
key = ~original_id,
#make sure mention_content = text variable of your data
text = ~paste("<br> Post:", text),
hoverinfo = "text", marker = list(size = size), height = umap_height) %>%
plotly::layout(dragmode = "lasso",
legend= list(itemsizing='constant')) %>%
plotly::event_register(event = "plotly_selected")
})
#Instantiate a reactive value, then update that value dynamically when points are selected.
selected_range <- shiny::reactiveVal({})
shiny::observeEvent(plotly::event_data("plotly_selected"),{
selected_range(plotly::event_data("plotly_selected"))
})
#--- Data Table ----
#Now render the data table, selecting all points within our boundaries. Would need to update this for lasso selection.,
output$highlightedTable <- DT::renderDataTable({
#Replacing pointNumber with a key allows for precise showing of points irrespective of variable input type.
key <- selected_range()$key
key <- as.numeric(key)
df_filtered <<- reactive_data() %>%
dplyr::filter(original_id %in% key)
df <- df_filtered %>%
#Select the columns you want to see from your data
dplyr::select(`ID` = original_id, `Text` = text_var,
`Colour Variable` = colour ,...)
DT::datatable(df, filter = "top", options = list(pageLength = input$n,
dom = '<"top" pif>', autoWidth = FALSE),
style = "bootstrap", rownames = FALSE,
caption = htmltools::tags$caption("Selected Mentions", style="color:white"),
escape = FALSE)
})
#--- Download Handler ----
output$downloadData <- shiny::downloadHandler(
filename = function() {
paste0(input$fileName, ".csv")
},
content = function(file) {
utils::write.csv(df_filtered, file)
}
)
output$downloadAll <- shiny::downloadHandler(
filename = function() {
paste0(input$remainingName, ".csv")
},
content = function(file) {
utils::write.csv(reactive_data(), file)
}
)
#--- Reactive plots ----
shiny::observeEvent(plotly::event_data("plotly_selected"),{
output$sentimentPlot <- renderPlot({
df_filtered %>%
HelpR::plot_sentiment_distribution() +
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "none")
}, res = 100)
})
shiny::observeEvent(plotly::event_data("plotly_selected"),{
output$tokenPlot <- renderPlot({
df_filtered %>%
HelpR::plot_tokens_counter(text_var = {{text_var}}, top_n = 25)
}, res = 100)
})
shiny::observeEvent(plotly::event_data("plotly_selected"),{
output$volumePlot <- renderPlot({
df_filtered %>%
HelpR::plot_volume_over_time(time =  "week", my_fill = "#107C10")
}, res = 100)
})
shiny::observeEvent(plotly::event_data("plotly_selected"),{
output$bigramPlot <- renderPlot({
if(length(selected_range()) > 1){
if(!length(selected_range()) >= 5000){
bigram <- df_filtered %>%
JPackage::make_bigram_viz(text_var = {{text_var}}, clean_text = FALSE, min = 5)
}else{
bigram <- df_filtered %>%
dplyr::sample_n(5000) %>%
JPackage::make_bigram_viz(text_var = {{text_var}}, clean_text = FALSE, min = 5)
}
}
bigram
}, res = 100)
})
output$volumePlot <- renderPlot({
if(length(selected_range()) > 1 ){
df_filtered %>%
HelpR::plot_volume_over_time(time =  "week", my_fill = "#107C10")
}
},res = 100)
output$sentimentPlot <- renderPlot({
if(length(selected_range()) > 1 ){
df_filtered %>%
HelpR::plot_sentiment_distribution() +
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "none")
}
}, res = 100)
output$tokenPlot <- renderPlot({
if(length(selected_range())> 1 ){
df_filtered %>%
HelpR::plot_tokens_counter(text_var = mention_content, top_n = 25)
}
}, res = 100)
output$bigramPlot <- renderPlot({
if(length(selected_range()) > 1){
if(!length(selected_range()) >= 5000){
bigram <- df_filtered %>%
JPackage::make_bigram_viz(text_var = {{text_var}}, clean_text = FALSE, min = 5)
}else{
bigram <- df_filtered %>%
dplyr::sample_n(5000) %>%
JPackage::make_bigram_viz(text_var = {{mention_content}}, clean_text = FALSE, min = 5)
}
}
bigram
}, res = 100)
}
#---- hide app render ----
shiny::shinyApp(ui, server)
}
