placeholder = "Write title here...", value = ""),
shiny::textInput(inputId = "sentimentSubtitle", label = "Subtitle",
placeholder = "Write subtitle here...", value = ""),
shiny::textInput(inputId = "sentimentCaption", label = "Caption",
placeholder = "Write caption here...", value = ""),
shiny::textInput(inputId = "sentimentXlabel", label = "X axis title",
placeholder = "Write the x axis title here..."),
shiny::textInput(inputId = "sentimentYlabel", label = "Y axis title",
placeholder = "Write the y axis title here"),
)
}
})
output$tokenTitles <- renderUI({
if(input$toggleTokentitles == "TRUE"){
tagList(
shiny::textInput(inputId = "tokenTitle", label = "Title",
placeholder = "Write title here...", value = ""),
shiny::textInput(inputId = "tokenSubtitle", label = "Subtitle",
placeholder = "Write subtitle here...", value = ""),
shiny::textInput(inputId = "tokenCaption", label = "Caption",
placeholder = "Write caption here...", value = ""),
shiny::textInput(inputId = "tokenXlabel", label = "X axis title",
placeholder = "Write the x axis title here..."),
shiny::textInput(inputId = "tokenYlabel", label = "Y axis title",
placeholder = "Write the y axis title here"),
)
}
})
#---- Bigram Plot ----
shiny::observeEvent(plotly::event_data("plotly_selected"),{
output$bigramPlot <- renderPlot({
if(length(selected_range()) > 1){
if(!length(selected_range()) >= 5000){
bigram <- df_filtered %>%
JPackage::make_bigram_viz(text_var = {{cleaned_text_var}}, clean_text = FALSE, min = 5)
}else{
bigram <- df_filtered %>%
dplyr::sample_n(5000) %>%
JPackage::make_bigram_viz(text_var = {{cleaned_text_var}}, clean_text = FALSE, min = 5)
}
}
bigram
}, res = 100,
width = function() input$bigramWidth,
height = function() input$bigramHeight)
})
#---- Download boxes for plots ----
download_box <- function(exportname, plot) {
downloadHandler(
filename = function() {
paste(exportname, Sys.Date(), ".png", sep = "")
},
content = function(file) {
ggsave(file, plot = plot, device = "png", width = 8)
}
)
}
output$saveVolume <- download_box("volume_plot", volume_reactive())
output$saveToken <- download_box("token_plot", token_reactive())
output$saveSentiment <- download_box("sentiment_plot", sentiment_reactive())
}
#---- hide app render ----
shiny::shinyApp(ui, server)
}
data %>%
mutate(cluster = as.character(cluster)) %>%
LimpiaR::limpiar_link_click(permalink) %>%
conversation_landscape(permalink, date_var = date, id = universal_message_id,text_var = text_copy, cleaned_text_var = text, colour_var = cluster, sentiment_var = sentiment)
library(tidyverse)
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
optiosn()
options()
options(text_var = mention_content)
options("text_var" = "mention_content")
options
getOptions()
getOption()
getOption(text_var)
data
data <- read_csv("~/Google Drive/My Drive/Data Science Project Work/Microsoft/Project Work/551_sustainability/data/551_lucas_ewaste_umap.csv")
data
options()
my_options <- options()
my_options$text_var
library(LimpiaR)
names(data)
options("text_var" = "text")
library(LimpiaR)
data %>%
limpiar_spaces()
options(text_var = text)
data %>%
limpiar_spaces()
limpiar_spaces()
limpiar_spaces
my_limpiar_spaces <- function(df, text_var = mention_content){
df %>%
dplyr::mutate({{ text_var }} := stringr::str_trim({{ text_var }}),
{{ text_var }} := stringr::str_squish({{ text_var }}),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\.", "."),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\,", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+:", ":"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+;", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\!", "!"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\?", "?"))
}
my_limpiar_spaces <- function(df, text_var){
text_var = getOption(text_var)
df %>%
dplyr::mutate({{ text_var }} := stringr::str_trim({{ text_var }}),
{{ text_var }} := stringr::str_squish({{ text_var }}),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\.", "."),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\,", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+:", ":"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+;", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\!", "!"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\?", "?"))
}
data %>%
my_limpiar_spaces()
my_limpiar_spaces <- function(df, text_var){
text_var = getOption("text_var")
df %>%
dplyr::mutate({{ text_var }} := stringr::str_trim({{ text_var }}),
{{ text_var }} := stringr::str_squish({{ text_var }}),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\.", "."),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\,", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+:", ":"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+;", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\!", "!"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\?", "?"))
}
data %>%
my_limpiar_spaces()
getOption("text_var")
my_limpiar_spaces <- function(df, text_var){
text_var = getOption("text_var")
df %>%
dplyr::mutate(text_var := stringr::str_trim( text_var ))
# {{ text_var }} := stringr::str_squish({{ text_var }}),
# {{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\.", "."),
# {{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\,", ","),
# {{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+:", ":"),
# {{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+;", ","),
# {{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\!", "!"),
# {{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\?", "?"))
}
data %>%
my_limpiar_spaces()
?getOPtion
?getOption
getOption(digits)
getOption("digits")
options(digits = 3)
getOption("digits")
my_limpiar_spaces <- function(df, text_var = getOption(text_var)){
df %>%
dplyr::mutate({{ text_var }} := stringr::str_trim({{ text_var }}),
{{ text_var }} := stringr::str_squish({{ text_var }}),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\.", "."),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\,", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+:", ":"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+;", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\!", "!"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\?", "?"))
}
data %>%
my_limpiar_spaces()
getOption(text_var)
options(text_var = text)
data %>%
my_limpiar_spaces()
data %>%
limpiar_spaces()
data %>%
limpiar_spaces(mention_content)
data %>%
limpiar_spaces(text)
options(`text_var` = `text`)
my_limpiar_spaces <- function(df, text_var = getOption(text_var)){
df %>%
dplyr::mutate({{ text_var }} := stringr::str_trim({{ text_var }}),
{{ text_var }} := stringr::str_squish({{ text_var }}),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\.", "."),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\,", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+:", ":"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+;", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\!", "!"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\?", "?"))
}
data %>%
limpiar_spaces(text)
data %>%
limpiar_spaces()
my_limpiar_spaces <- function(df, text_var = getOption(text_var)){
df %>%
dplyr::mutate({{ text_var }} := stringr::str_trim({{ text_var }}),
{{ text_var }} := stringr::str_squish({{ text_var }}),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\.", "."),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\,", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+:", ":"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+;", ","),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\!", "!"),
{{ text_var }} := stringr::str_replace_all({{ text_var }}, "[:space:]+\\?", "?"))
}
data %>%
my_limpiar_spaces()
JPackage::count_multiple
my_count <- function(df, ...){
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_split(name)%>%
purrr::map(., ~ .x %>%
dplyr::count(value, sort = TRUE) %>%
dplyr::mutate(percent = 100 * n / sum(n)))
names(list_output) <- list_names
return(list_output)
}
mtcars %>%
my_count(mpg, cyl)
library(tidyverse)
mtcars %>%
my_count(mpg, cyl)
mtcars
data("starwars")
starwars
df <- starwars
df
df %>%
nest(data = everything())
df %>%
nest(data = name)
df %>%
nest(data = c(name, height, masss))
df %>%
nest(data = c(name, height, mass))
my_count <- function(df, ...){
df <- df %>%
dplyr::nest(data = ...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_split(name)%>%
purrr::map(., ~ .x %>%
dplyr::count(value, sort = TRUE) %>%
dplyr::mutate(percent = 100 * n / sum(n)))
names(list_output) <- list_names
return(list_output)
}
mtcars %>%
my_count(mpg, cyl)
my_count <- function(df, ...){
df <- df %>%
tidyr::nest(data = ...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_split(name)%>%
purrr::map(., ~ .x %>%
dplyr::count(value, sort = TRUE) %>%
dplyr::mutate(percent = 100 * n / sum(n)))
names(list_output) <- list_names
return(list_output)
}
mtcars %>%
my_count(mpg, cyl)
my_count <- function(df, list_cols){
df <- df %>%
tidyr::nest(data = c(list_cols))%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_split(name)%>%
purrr::map(., ~ .x %>%
dplyr::count(value, sort = TRUE) %>%
dplyr::mutate(percent = 100 * n / sum(n)))
names(list_output) <- list_names
return(list_output)
}
mtcars %>%
my_count(mpg, cyl)
my_count <- function(df, list_cols){
df <- df %>%
tidyr::nest(data = c(list_cols))%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_split(name)%>%
purrr::map(., ~ .x %>%
tidyr::unnest() %>%
dplyr::count(value, sort = TRUE) %>%
dplyr::mutate(percent = 100 * n / sum(n)))
names(list_output) <- list_names
return(list_output)
}
mtcars %>%
my_count(mpg, cyl)
df %>%
nest(data = c(name, height, mass))
df
df %>%
select(name, height)
df %>%
select(name, height) %>%
mutate(across(everything(), ~ .x %>% nest()))
df %>%
select(name, height) %>%
mutate(across(everything(), nest))
df %>%
select(name, height) %>%
nest(everything())
df %>%
select(name, height) %>%
nest(data = everything())
df
df %>%
select(name, height)
tst <- df %>%
select(name, height)
print(x)
for(x in names(tst)) print(x)
for(x in names(tst)) count(df$`x`)
for(x in names(tst)) count(tst$`x`)
for(x in names(tst)) print(x)
for(x in names(tst)){
x_name <- x
print(x_name)
}
for(x in names(tst)){
x_name <- x
counts <- list(count(x = df$x))
list(counts)
}
df %>%
count(x)
for(x in names(tst)){
df %>%
count(.data$x)
}
for(x in names(tst)){
test %>%
count(.data$x)
}
tet %>%
count(.data$x)
for(x in names(tst)){
tst %>%
count(.data$x)
}
names(tst)
x_names <- names(tst)
map(x_names, ~ tst %>% count(.x))
map(.x = x_names, .f = ~ tst %>% count(.x))
x_names
tst
"name" %in% names(tst)
ensyms(x_names)
?list2
my_count <- function(df, ...){
#
# df <- df %>%
#   dplyr::select(...)%>%
#   tidyr::pivot_longer(cols = everything())
#
# list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
# list_names <- sort(list_names)
#
# list_output <- df %>%
#   dplyr::group_split(name)%>%
#   purrr::map(., ~ .x %>%
#                dplyr::count(value, sort = TRUE) %>%
#                dplyr::mutate(percent = 100 * n / sum(n)))
#
# names(list_output) <- list_names
#
# return(list_output)
dots <- list2(...)
map(dots, ~ df %>%
count(.x))
}
mtcars %>%
my_count(mpg, cyl)
my_count <- function(df, ...){
#
# df <- df %>%
#   dplyr::select(...)%>%
#   tidyr::pivot_longer(cols = everything())
#
# list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
# list_names <- sort(list_names)
#
# list_output <- df %>%
#   dplyr::group_split(name)%>%
#   purrr::map(., ~ .x %>%
#                dplyr::count(value, sort = TRUE) %>%
#                dplyr::mutate(percent = 100 * n / sum(n)))
#
# names(list_output) <- list_names
#
# return(list_output)
dots <- rlang::list2(...)
map(dots, ~ df %>%
count(.x))
}
mtcars %>%
my_count(mpg, cyl)
my_count <- function(df, ...){
#
# df <- df %>%
#   dplyr::select(...)%>%
#   tidyr::pivot_longer(cols = everything())
#
# list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
# list_names <- sort(list_names)
#
# list_output <- df %>%
#   dplyr::group_split(name)%>%
#   purrr::map(., ~ .x %>%
#                dplyr::count(value, sort = TRUE) %>%
#                dplyr::mutate(percent = 100 * n / sum(n)))
#
# names(list_output) <- list_names
#
# return(list_output)
dots <- rlang::list2(...)
print(dots)
}
mtcars %>%
my_count(mpg, cyl)
my_count <- function(df, ...){
#
# df <- df %>%
#   dplyr::select(...)%>%
#   tidyr::pivot_longer(cols = everything())
#
# list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
# list_names <- sort(list_names)
#
# list_output <- df %>%
#   dplyr::group_split(name)%>%
#   purrr::map(., ~ .x %>%
#                dplyr::count(value, sort = TRUE) %>%
#                dplyr::mutate(percent = 100 * n / sum(n)))
#
# names(list_output) <- list_names
#
# return(list_output)
dots <- rlang::list2(rlang::enquos(...))
print(dots)
}
mtcars %>%
my_count(mpg, cyl)
my_count <- function(df, ...){
#
# df <- df %>%
#   dplyr::select(...)%>%
#   tidyr::pivot_longer(cols = everything())
#
# list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
# list_names <- sort(list_names)
#
# list_output <- df %>%
#   dplyr::group_split(name)%>%
#   purrr::map(., ~ .x %>%
#                dplyr::count(value, sort = TRUE) %>%
#                dplyr::mutate(percent = 100 * n / sum(n)))
#
# names(list_output) <- list_names
#
# return(list_output)
# dots <- rlang::list2(rlang::enquos(...))
dots <- rlang::enquos(...)
print(dots)
}
mtcars %>%
my_count(mpg, cyl)
my_count <- function(df, ...){
#
# df <- df %>%
#   dplyr::select(...)%>%
#   tidyr::pivot_longer(cols = everything())
#
# list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
# list_names <- sort(list_names)
#
# list_output <- df %>%
#   dplyr::group_split(name)%>%
#   purrr::map(., ~ .x %>%
#                dplyr::count(value, sort = TRUE) %>%
#                dplyr::mutate(percent = 100 * n / sum(n)))
#
# names(list_output) <- list_names
#
# return(list_output)
# dots <- rlang::list2(rlang::enquos(...))
dots <- rlang::enquos(...)
print(dots)
map(dots, ~ df %>% count(.x ))
}
mtcars %>%
my_count(mpg, cyl)
library(JPackage)
