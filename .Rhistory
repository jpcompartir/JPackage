library(roxygen2)
#roxygenise(clean = TRUE)
use_r("pattern_match_list")
pattern_match_list <- function(df, text_var, pattern_vector){
for(x in pattern_vector) df[x] <- grepl(x, df$text_var)
}
library(tidyverse)
tibble(text = "text microsoft google") %>%
pattern_match_list(., "text", c("microsoft", "google"))
tibble(text = "text microsoft google") %>%
pattern_match_list(., text, c("microsoft", "google"))
pattern_match_list <- function(df, text_var, pattern_vector){
rlang::ensym(text_var)
for(x in pattern_vector) df[x] <- grepl(x, df$!!text_var)
}
text_sym <- rlang::ensym(text_var)
stuff <- paste0(df, text_var)
pattern_match_list <- function(df, text_var, pattern_vector){
text_sym <- rlang::ensym(text_var)
stuff <- paste0(df, text_var)
for(x in pattern_vector) df[x] <- grepl(x, !!stuff)
}
tibble(text = "text microsoft google") %>%
pattern_match_list(., text, c("microsoft", "google"))
pattern_match_list <- function(df, text_var, pattern_vector){
text_sym <- rlang::ensym(text_var)
stuff <- paste0(df,"$", text_var)
for(x in pattern_vector) df[x] <- grepl(x, !!stuff)
}
tibble(text = "text microsoft google") %>%
pattern_match_list(., text, c("microsoft", "google"))
pattern_match_list <- function(df, text_var, pattern_vector){
text_sym <- rlang::ensym(text_var)
stuff <- paste0(df,"$", text_var)
for(x in pattern_vector) df[x] <- grepl(x, !!stuff)
}
tibble(text = "text microsoft google") %>%
pattern_match_list(., "text", c("microsoft", "google"))
use_r('make_DTMs_parallel')
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
use_r('make_DTMs_parallel')
library(JPackage)
library(JPackage)
library(JPackage)
document()
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
library(JPackage)
document()
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
test()
document()
document()
library(JPackage)
umap_shiny
document()
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
check()
document()
check()
?availableCores()
document()
document()
check()
document()
check()
?downloadHandler
document()
library(JPackage)
library(JPackage)
#' Quickly plot group sentiment distributions as a perentage
#'
#' @param df data frame
#' @param group_var Grouping variable, e.g. country, topic, cluster
#' @param sentiment_var Sentiment variable (categorical)
#' @param type Whether the plot should be of volume or py percentage. Acccepts "percent" or "volume"
#'
#' @return Ggplot stacked bar chart with x and y coords flipped
#' @export
#'
plot_group_sentiment <- function(df, group_var = topic, sentiment_var = sentiment, type = "percent"){
df <- df %>%
dplyr::count({{group_var}}, {{sentiment_var}}) %>%
dplyr::add_count({{group_var}}, wt = n) %>%
dplyr::mutate(percent = n/nn * 100)
if(type == "percent"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = percent, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
ggplot2::geom_text(ggplot2::aes(label = paste0(round(percent, 1), "%")), vjust = 0.5, hjust = 0.5, size = 3)+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "% of Posts")
} else if(type == "volume"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = n, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
ggplot2::geom_text(ggplot2::aes(label = paste0(n), vjust = 0.5, hjust = 0.5, size = 3))+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "Number of Posts")
}
return(plot)
}
library(tidyverse)
ParseR::sprinklr_export
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(domain, sentiment)
#' Quickly plot group sentiment distributions as a perentage
#'
#' @param df data frame
#' @param group_var Grouping variable, e.g. country, topic, cluster
#' @param sentiment_var Sentiment variable (categorical)
#' @param type Whether the plot should be of volume or py percentage. Acccepts "percent" or "volume"
#'
#' @return Ggplot stacked bar chart with x and y coords flipped
#' @export
#'
plot_group_sentiment <- function(df, group_var = topic, sentiment_var = sentiment, type = "percent"){
df <- df %>%
dplyr::count({{group_var}}, {{sentiment_var}}) %>%
dplyr::add_count({{group_var}}, wt = n) %>%
dplyr::mutate(percent = n/nn * 100)
if(type == "percent"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = percent, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
ggplot2::geom_text(ggplot2::aes(label = paste0(round(percent, 1), "%")), vjust = 0.5, hjust = 0.5, size = 3)+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "% of Posts")
} else if(type == "volume"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = n, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
ggplot2::geom_text(ggplot2::aes(label = paste0(n), vjust = 0.5, hjust = 0.5, size = 3))+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "Number of Posts")
}
return(plot)
}
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_netowkr, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment)
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_netowrk, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment)
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_network, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment)
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_network, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment, type = "volume")
#' Quickly plot group sentiment distributions as a perentage
#'
#' @param df data frame
#' @param group_var Grouping variable, e.g. country, topic, cluster
#' @param sentiment_var Sentiment variable (categorical)
#' @param type Whether the plot should be of volume or py percentage. Acccepts "percent" or "volume"
#'
#' @return Ggplot stacked bar chart with x and y coords flipped
#' @export
#'
plot_group_sentiment <- function(df, group_var = topic, sentiment_var = sentiment, type = "percent"){
df <- df %>%
dplyr::count({{group_var}}, {{sentiment_var}}) %>%
dplyr::add_count({{group_var}}, wt = n) %>%
dplyr::mutate(percent = n/nn * 100)
if(type == "percent"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = percent, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
ggplot2::geom_text(ggplot2::aes(label = paste0(round(percent, 1), "%")), vjust = 0.5, hjust = 0.5, size = 3)+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "% of Posts")
} else if(type == "volume"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = n, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
ggplot2::geom_text(ggplot2::aes(label = paste0(n),size = 3, show.guides = FALSE))+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "Number of Posts")
}
return(plot)
}
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_network, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment, type = "volume")
?geom_text
#' Quickly plot group sentiment distributions as a perentage
#'
#' @param df data frame
#' @param group_var Grouping variable, e.g. country, topic, cluster
#' @param sentiment_var Sentiment variable (categorical)
#' @param type Whether the plot should be of volume or py percentage. Acccepts "percent" or "volume"
#'
#' @return Ggplot stacked bar chart with x and y coords flipped
#' @export
#'
plot_group_sentiment <- function(df, group_var = topic, sentiment_var = sentiment, type = "percent"){
df <- df %>%
dplyr::count({{group_var}}, {{sentiment_var}}) %>%
dplyr::add_count({{group_var}}, wt = n) %>%
dplyr::mutate(percent = n/nn * 100)
if(type == "percent"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = percent, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
ggplot2::geom_text(ggplot2::aes(label = paste0(round(percent, 1), "%")), vjust = 0.5, hjust = 0.5, size = 3, show.legend = FALSE)+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "% of Posts")
} else if(type == "volume"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = n, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
ggplot2::geom_text(ggplot2::aes(label = paste0(n),size = 3, show.legend = FALSE))+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "Number of Posts")
}
return(plot)
}
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_network, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment, type = "volume")
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_network, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment, type = "percent")
#' Quickly plot group sentiment distributions as a perentage
#'
#' @param df data frame
#' @param group_var Grouping variable, e.g. country, topic, cluster
#' @param sentiment_var Sentiment variable (categorical)
#' @param type Whether the plot should be of volume or py percentage. Acccepts "percent" or "volume"
#'
#' @return Ggplot stacked bar chart with x and y coords flipped
#' @export
#'
plot_group_sentiment <- function(df, group_var = topic, sentiment_var = sentiment, type = "percent"){
df <- df %>%
dplyr::count({{group_var}}, {{sentiment_var}}) %>%
dplyr::add_count({{group_var}}, wt = n) %>%
dplyr::mutate(percent = n/nn * 100)
if(type == "percent"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = percent, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
# ggplot2::geom_text(ggplot2::aes(label = paste0(round(percent, 1), "%")), vjust = 0.5, hjust = 0.5, size = 3, show.legend = FALSE)+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "% of Posts")
} else if(type == "volume"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = n, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
# ggplot2::geom_text(ggplot2::aes(label = paste0(n),size = 3, show.legend = FALSE))+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "Number of Posts")
}
return(plot)
}
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_network, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment, type = "volume")
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_network, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment, type = "percent")
#'
#' @param df data frame
#' @param group_var Grouping variable, e.g. country, topic, cluster
#' @param sentiment_var Sentiment variable (categorical)
#' @param type Whether the plot should be of volume or py percentage. Acccepts "percent" or "volume"
#' @param title The title of the plot, entered as a string.
#'
#' @return Ggplot stacked bar chart with x and y coords flipped
#' @export
#'
plot_group_sentiment <- function(df, group_var = topic, sentiment_var = sentiment, type = "percent",
title = "Grouped Sentiment Chart"){
df <- df %>%
dplyr::count({{group_var}}, {{sentiment_var}}) %>%
dplyr::add_count({{group_var}}, wt = n) %>%
dplyr::mutate(percent = n/nn * 100)
if(type == "percent"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = percent, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
# ggplot2::geom_text(ggplot2::aes(label = paste0(round(percent, 1), "%")), vjust = 0.5, hjust = 0.5, size = 3, show.legend = FALSE)+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "% of Posts",
title = title)
} else if(type == "volume"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = n, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
# ggplot2::geom_text(ggplot2::aes(label = paste0(n),size = 3, show.legend = FALSE))+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "Number of Posts",
title = title)
}
return(plot)
}
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_network, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment, type = "volume")
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_network, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment, type = "percent")
document()
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
rm(list=ls())
document()
#'
#' @param df data frame
#' @param group_var Grouping variable, e.g. country, topic, cluster
#' @param sentiment_var Sentiment variable (categorical)
#' @param type Whether the plot should be of volume or py percentage. Acccepts "percent" or "volume"
#' @param title The title of the plot, entered as a string.
#'
#' @return Ggplot stacked bar chart with x and y coords flipped
#' @export
#'
plot_group_sentiment <- function(df, group_var = topic, sentiment_var = sentiment, type = "percent",
title = "Grouped Sentiment Chart"){
df <- df %>%
dplyr::count({{group_var}}, {{sentiment_var}}) %>%
dplyr::add_count({{group_var}}, wt = n, name = ".total") %>%
dplyr::mutate(percent = n/.total * 100)
if(type == "percent"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = percent, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
# ggplot2::geom_text(ggplot2::aes(label = paste0(round(percent, 1), "%")), vjust = 0.5, hjust = 0.5, size = 3, show.legend = FALSE)+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "% of Posts",
title = title)
} else if(type == "volume"){
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(y = {{group_var}}, x = n, fill = {{sentiment_var}}))+
ggplot2::geom_col() +
# ggplot2::geom_text(ggplot2::aes(label = paste0(n),size = 3, show.legend = FALSE))+
HelpR::theme_microsoft_discrete() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(fill = NULL, y = NULL, x = "Number of Posts",
title = title)
}
return(plot)
}
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_network, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment, type = "volume")
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
select(social_network, sentiment) %>%
plot_group_sentiment(group_var = social_network, sentiment_var = sentiment, type = "percent")
document()
rm(list=ls())
document()
document()
check()
document()
document()
document()
document()
check()
document()
library(JPackage)
document()
check()
document()
document()
document()
check()
document()
check()
library(JPackage)
document()
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
umap_shiny <- function(data, x_var = V1, y_var = V2, text_var = mention_content, colour_var = cluster, size = 2, umap_height = 600, type = "scattergl",...){
text_sym <- rlang::ensym(text_var)
colour_sym <- rlang::ensym(colour_var)
data <- dplyr::mutate(data, plot_id = dplyr::row_number())
data <- dplyr::select(data, plot_id, {{x_var}},{{y_var}}, {{text_var}}, {{colour_var}})
data <- dplyr::rename(data, text_var = 4, colour_var = 5)
ui <- shiny::fluidPage(
shiny::downloadButton("downloadData", "Download"),
shiny::textInput("fileName", "File Name", "mydata"),
shiny::numericInput("n", "Number of posts to display", 10, min = 1, max = 100),
shiny::hr(),
shiny::fluidRow(
shiny::column(2, shiny::sliderInput( "x1","V1 Greater than", -50, 20, -20)),
shiny::column(2, shiny::sliderInput("x2","V1 Less than",  -10, 50, 20)),
shiny::column(2, shiny::sliderInput( "y1","V2 Greater than", -50, 20, -20)),
shiny::column(2, shiny::sliderInput( "y2","V2 Less than", -10, 50, 20))
),
shiny::hr(),
shiny::fluidRow(
shiny::column(7,
plotly::plotlyOutput("umapPlot")
),
shiny::column(5,
DT::dataTableOutput("highlightedTable")
)
),
)
server <- function(input, output, session){
output$umapPlot = plotly::renderPlotly({
#cluster can be changed
data %>%
dplyr::filter(V1 > input$x1, V1 < input$x2, V2 > input$y1, V2 < input$y2) %>%
plotly::plot_ly(x = ~V1, y = ~V2, type = type, color = ~colour_var,
#make sure mention_content = text variable of your data
text = ~paste("<br> Post:", text_var),
hoverinfo = "text", marker = list(size = size), height = umap_height) %>%
plotly::layout(dragmode = "select") %>%
plotly::event_register(event = "plotly_selected")
})
#Instantiate a reactive value, then update that value dynamically when points are selected.
selected_range <- shiny::reactiveVal({})
shiny::observeEvent(plotly::event_data("plotly_selected"),{
selected_range(plotly::event_data("plotly_selected"))
})
#Now render the data table, selecting all points within our boundaries. Would need to update this for lasso selection.,
output$highlightedTable <- DT::renderDataTable({
points <- selected_range()$pointNumber + 1
df <- data %>%
dplyr::filter(plot_id %in% points) %>%
#Select the columns you want to see from your data
dplyr::select(plot_id, text_var, colour_var)
df_copy <<- df
DT::datatable(df, filter = "top", options = list(pageLength = input$n))
})
output$downloadData <- shiny::downloadHandler(
filename = function() {
paste0(input$fileName, ".csv")
},
content = function(file) {
utils::write.csv(df_copy, file)
}
)
}
shiny::shinyApp(ui, server)
}
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
document()
check()
document()
check()
document()
check()
library(JPackage)
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
check()
library(JPackage)
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
rm(list=ls())
document()
check()
document()
document()
document()
check()
