#' @param range_before Vector of min. words before, max words before
#' @param range_after Vector of min. words after, max words after
#'
#' @return a data frame of the extracted contexts
#' @export
#'
context_grabber <- function(data, text_var = mention_content, pattern){
#'
#' @param data  Data frame or tibble object
#' @param text_var Name of the text variable
#' @param pattern Pattern to search for
#' @param range_before Vector of min. words before, max words before
#' @param range_after Vector of min. words after, max words after
#'
#' @return a data frame of the extracted contexts
#' @export
#'
context_grabber <- function(data, text_var = mention_content, pattern){
.col = rlang::enquo(pattern)
text_var <- data %>% dplyr::pull({{text_var}})
pattern <- paste0("(\\w+\\s+){1,5}\\s*", pattern, "\\s+(\\w+|\\s+){1,10}", collapse = "")
contexts <-  unlist(stringr::str_extract_all(text_var, pattern))
tibble(!!paste0("", rlang::quo_name(.col)) := pattern = contexts)
}
#'
#' @param data  Data frame or tibble object
#' @param text_var Name of the text variable
#' @param pattern Pattern to search for
#' @param range_before Vector of min. words before, max words before
#' @param range_after Vector of min. words after, max words after
#'
#' @return a data frame of the extracted contexts
#' @export
#'
context_grabber <- function(data, text_var = mention_content, pattern){
.col = rlang::enquo(pattern)
text_var <- data %>% dplyr::pull({{text_var}})
pattern <- paste0("(\\w+\\s+){1,5}\\s*", pattern, "\\s+(\\w+|\\s+){1,10}", collapse = "")
contexts <-  unlist(stringr::str_extract_all(text_var, pattern))
tibble(!!paste0("", rlang::quo_name(.col)) := pattern = contexts)
}
#'
#' @param data  Data frame or tibble object
#' @param text_var Name of the text variable
#' @param pattern Pattern to search for
#' @param range_before Vector of min. words before, max words before
#' @param range_after Vector of min. words after, max words after
#'
#' @return a data frame of the extracted contexts
#' @export
#'
context_grabber <- function(data, text_var = mention_content, pattern){
.col = rlang::enquo(pattern)
text_var <- data %>% dplyr::pull({{text_var}})
pattern <- paste0("(\\w+\\s+){1,5}\\s*", pattern, "\\s+(\\w+|\\s+){1,10}", collapse = "")
contexts <-  unlist(stringr::str_extract_all(text_var, pattern))
tibble(!!paste0("", rlang::quo_name(.col)) := pattern = contexts)
}
context_grabber <- function(data, text_var = mention_content, pattern){
.col = rlang::enquo(pattern)
text_var <- data %>% dplyr::pull({{text_var}})
pattern <- paste0("(\\w+\\s+){1,5}\\s*", pattern, "\\s+(\\w+|\\s+){1,10}", collapse = "")
contexts <-  unlist(stringr::str_extract_all(text_var, pattern))
tibble(!!paste0("", rlang::quo_name(.col)) := pattern = contexts)
}
context_grabber <- function(data, text_var = mention_content, pattern){
.col = rlang::enquo(pattern)
text_var <- data %>% dplyr::pull({{text_var}})
pattern <- paste0("(\\w+\\s+){1,5}\\s*", pattern, "\\s+(\\w+|\\s+){1,10}", collapse = "")
contexts <-  unlist(stringr::str_extract_all(text_var, pattern))
tibble(!!paste0("", rlang::quo_name(.col)) rlang:::= pattern = contexts)
}
context_grabber <- function(data, text_var = mention_content, pattern){
.col = rlang::enquo(pattern)
text_var <- data %>% dplyr::pull({{text_var}})
pattern <- paste0("(\\w+\\s+){1,5}\\s*", pattern, "\\s+(\\w+|\\s+){1,10}", collapse = "")
contexts <-  unlist(stringr::str_extract_all(text_var, pattern))
contexts
}
context_grabber(data, "lol")
context_grabber(data, mention_content, "lol")
context_grabber <- function(data, text_var = mention_content, pattern){
.col = rlang::enquo(pattern)
text_var <- data %>% dplyr::pull({{text_var}})
pattern <- paste0("(\\w+\\s+){1,5}\\s*", pattern, "\\s+(\\w+|\\s+){1,10}", collapse = "")
tibble::tibble(contexts =  unlist(stringr::str_extract_all(text_var, pattern)))
}
context_grabber(data, mention_content, "lol")
context_grabber(data, mention_content, "hey")
rm(list=ls())
document()
check()
globalVariables(c("mention_content", "n_gram", "count", "ngram", "df", "data","pattern"))
library(JPackage)
library(devtools)
library(roxygen2)
user_r("get_tags")
use_r("get_tags")
document()
check()
rm(list=ls())
library(JPackage)
library(devtools)
library(roxygen2)
document()
document()
check()
sentences <- data.frame(sentences = sentences)
sentences <- data.frame(stringr::sentences = sentences)
sentences <- data.frame(sentences = stringr::sentences)
context_grabber(sentences, text_var = sentences, pattern = "man", range_before = 5, range_after = 10)
context_grabber(sentences, text_var = sentences, pattern = "man",
range_before = 2, range_after = 10)
context_grabber(sentences, text_var = sentences, pattern = "man",
range_before = 1, range_after = 10)
context_grabber(sentences, text_var = sentences, pattern = "man",
range_before = 0, range_after = 10)
context_grabber(sentences, text_var = sentences, pattern = "man",
range_before = -1, range_after = 10)
context_grabber(sentences, text_var = sentences, pattern = "man",
range_before = -1, range_after = 0)
context_grabber(sentences, text_var = sentences, pattern = "man",
range_before = -1, range_after = -1)
context_grabber(sentences, text_var = sentences, pattern = "man",
range_before = -1, range_after = 1)
library(plotly)
library(tidyverse)
library(shiny)
fake_data_wide <- tibble(level_1 = rep(c("A", "B", "C"), each = 50),
level_2 = rep(c(c("1", "2"), c("3", "4"), c("5", "6")), each = 25),
level_3 = c(rep("a", 40), rep("b", 10), rep("c", 30), rep("d", 20),
rep("e", 20), rep("f", 30)),
sent = rnorm(150),
number = rpois(150, lambda = 1))
fake_data_long <- fake_data_wide %>%
pivot_longer(level_1:level_3, names_to = "level_of_specificity",
values_to = "group_name")
one_level_down <- fake_data_wide %>%
select(group_name = level_1,
one_down = level_2) %>%
bind_rows(fake_data_wide %>%
select(group_name = level_2,
one_down = level_3)) %>% distinct()
ui <- dashboardPage(
header = dashboardHeader(title = "test"),
sidebar = dashboardSidebar(),
body = dashboardBody(fluidRow(box(plotlyOutput("drill_down_plot"),
id = "test_box"),
uiOutput("back")))
)
library(bs4dash)
install.packages("bs4dash")
install.packages("bs4Dash")
library(bs4dash)
library(bs4Dash)
library(bs4Dash)
fake_data_wide <- tibble(level_1 = rep(c("A", "B", "C"), each = 50),
level_2 = rep(c(c("1", "2"), c("3", "4"), c("5", "6")), each = 25),
level_3 = c(rep("a", 40), rep("b", 10), rep("c", 30), rep("d", 20),
rep("e", 20), rep("f", 30)),
sent = rnorm(150),
number = rpois(150, lambda = 1))
fake_data_long <- fake_data_wide %>%
pivot_longer(level_1:level_3, names_to = "level_of_specificity",
values_to = "group_name")
one_level_down <- fake_data_wide %>%
select(group_name = level_1,
one_down = level_2) %>%
bind_rows(fake_data_wide %>%
select(group_name = level_2,
one_down = level_3)) %>% distinct()
ui <- dashboardPage(
header = dashboardHeader(title = "test"),
sidebar = dashboardSidebar(),
body = dashboardBody(fluidRow(box(plotlyOutput("drill_down_plot"),
id = "test_box"),
uiOutput("back")))
)
liserver <- function(input, output){
selections <- reactiveValues()
observeEvent(event_data("plotly_selected", source = "drill_down_plot"), {
new <- event_data("plotly_selected")$customdata[[1]]
old <- selections()
selections() <- (c(old, new))
})
output$drill_down_plot <- renderPlotly({
if(length(selections() == 0)){
fake_data_long %>%
filter(level_of_specificity == "level_1") %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
} else {
one_level_down %>%
filter(group_name %in% selections_test) %>%
mutate(group_name = one_down) %>% select(-one_down) %>%
inner_join(fake_data_long) %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
}
})
output$back <- renderUI({
if (length(selections()))
actionButton("clear", "Back", icon("chevron-left"))
})
}
server <- function(input, output){
selections <- reactiveValues()
observeEvent(event_data("plotly_selected", source = "drill_down_plot"), {
new <- event_data("plotly_selected")$customdata[[1]]
old <- selections()
selections() <- (c(old, new))
})
output$drill_down_plot <- renderPlotly({
if(length(selections() == 0)){
fake_data_long %>%
filter(level_of_specificity == "level_1") %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
} else {
one_level_down %>%
filter(group_name %in% selections_test) %>%
mutate(group_name = one_down) %>% select(-one_down) %>%
inner_join(fake_data_long) %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
}
})
output$back <- renderUI({
if (length(selections()))
actionButton("clear", "Back", icon("chevron-left"))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output){
selections <- reactiveValues(input$drill_down_plot)
observeEvent(event_data("plotly_selected", source = "drill_down_plot"), {
new <- event_data("plotly_selected")$customdata[[1]]
old <- selections()
selections()(c(old, new))
})
output$drill_down_plot <- renderPlotly({
if(length(selections() == 0)){
fake_data_long %>%
filter(level_of_specificity == "level_1") %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
} else {
one_level_down %>%
filter(group_name %in% selections_test) %>%
mutate(group_name = one_down) %>% select(-one_down) %>%
inner_join(fake_data_long) %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
}
})
output$back <- renderUI({
if (length(selections()))
actionButton("clear", "Back", icon("chevron-left"))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output){
selections <- reactiveValues({input$drill_down_plot})
observeEvent(event_data("plotly_selected", source = "drill_down_plot"), {
new <- event_data("plotly_selected")$customdata[[1]]
old <- selections()
selections()(c(old, new))
})
output$drill_down_plot <- renderPlotly({
if(length(selections() == 0)){
fake_data_long %>%
filter(level_of_specificity == "level_1") %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
} else {
one_level_down %>%
filter(group_name %in% selections_test) %>%
mutate(group_name = one_down) %>% select(-one_down) %>%
inner_join(fake_data_long) %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
}
})
output$back <- renderUI({
if (length(selections()))
actionButton("clear", "Back", icon("chevron-left"))
})
}
server <- function(input, output){
selections <- reactiveValues({input$drill_down_plot})
observeEvent(event_data("plotly_selected", source = "drill_down_plot"), {
new <- event_data("plotly_selected")$customdata[[1]]
old <- selections()
selections()(c(old, new))
})
output$drill_down_plot <- renderPlotly({
if(length(selections() == 0)){
fake_data_long %>%
filter(level_of_specificity == "level_1") %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
} else {
one_level_down %>%
filter(group_name %in% selections_test) %>%
mutate(group_name = one_down) %>% select(-one_down) %>%
inner_join(fake_data_long) %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
}
})
output$back <- renderUI({
if (length(selections()))
actionButton("clear", "Back", icon("chevron-left"))
})
}
shinyApp(ui = ui, server = server)
selections <- reactiveValues({
input$plotly_selected
})
selections <- reactiveValues({
input$plotly_selected
})
server <- function(input, output){
selections <- reactiveVal()
observeEvent(event_data("plotly_selected", source = "drill_down_plot"), {
new <- event_data("plotly_selected")$customdata[[1]]
old <- selections()
selections()(c(old, new))
})
output$drill_down_plot <- renderPlotly({
if(length(selections() == 0)){
fake_data_long %>%
filter(level_of_specificity == "level_1") %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
} else {
one_level_down %>%
filter(group_name %in% selections_test) %>%
mutate(group_name = one_down) %>% select(-one_down) %>%
inner_join(fake_data_long) %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
}
})
output$back <- renderUI({
if (length(selections()))
actionButton("clear", "Back", icon("chevron-left"))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output){
selections <- reactiveVal()
observeEvent(event_data("plotly_selected", source = "drill_down_plot"), {
new <- event_data("plotly_selected")$customdata[[1]]
old <- selections()
selections()(c(old, new))
})
output$drill_down_plot <- renderPlotly({
event_register(p, 'plotly_selected')
if(length(selections() == 0)){
fake_data_long %>%
filter(level_of_specificity == "level_1") %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
} else {
one_level_down %>%
filter(group_name %in% selections_test) %>%
mutate(group_name = one_down) %>% select(-one_down) %>%
inner_join(fake_data_long) %>%
group_by(group_name) %>%
summarise(g_sent_mean = mean(sent),
g_total_mean = mean(number)) %>% ungroup() %>%
plot_ly(x = ~g_sent_mean, y = ~g_total_mean,
size = ~g_total_mean, customdata = ~group_name)
}
})
output$back <- renderUI({
if (length(selections()))
actionButton("clear", "Back", icon("chevron-left"))
})
}
shinyApp(ui = ui, server = server)
library(devtools)
library(roxygen2)
check()
use_r("fix_radarly")
#'
#' @param x Name of Data Frame / Tibble object
#'
#' @return
#' @export
#'
#' @usage
#' df <- df %>% fix_radarly()
#'
#' df <- fix_radarly(df)
fix_radarly <- function(x){
x %>%
janitor::clean_names()%>%
dplyr::rename(mention_content = text,
mention_url = permalink,
sentiment = tone)%>%
dplyr::mutate(date = lubridate::dmy_hms(date),
date = as.Date(date),
screen_name = case_when(is.na(screen_name)~ "NA",
TRUE ~ screen_name))
}
rose <- read_csv("data/rosewine.csv")
rose <- readr::read_csv("data/rosewine.csv")
rose <- readr::read_csv("~/Google Drive/My Drive/Data Science Project Work/campo_viejo/data/rosewine.csv")
rose %>% fix_radarly()
#'
#' @param x Name of Data Frame / Tibble object
#'
#' @return
#' @export
#'
#' @usage
#' df <- df %>% fix_radarly()
#'
#' df <- fix_radarly(df)
fix_radarly <- function(x){
x %>%
janitor::clean_names()%>%
dplyr::rename(mention_content = text,
mention_url = permalink,
sentiment = tone)%>%
dplyr::mutate(date = lubridate::dmy_hms(date),
date = as.Date(date),
screen_name = dplyr::case_when(is.na(screen_name)~ "NA",
TRUE ~ screen_name))
}
rose %>% fix_radarly()
#'
#' @param x Name of Data Frame / Tibble object
#'
#' @return
#' @export
#'
#' @usage
#' df <- df %>% fix_radarly()
#'
#' df <- fix_radarly(df)
fix_radarly <- function(x){
x %>%
janitor::clean_names()%>%
dplyr::rename(mention_content = text,
mention_url = permalink,
sentiment = tone)%>%
dplyr::mutate(date = lubridate::dmy_hms(date),
date = as.Date(date),
screen_name = dplyr::case_when(is.na(screen_name)~ "NA",
TRUE ~ screen_name))%>%
LimpiaR::limpiar_na_cols(0.01)
}
rose %>% fix_radarly()
rm(list=ls())
document()
check()
document()
check()
use_package("janitor")
use_package("lubridate")
use_package("LimpiaR")
document()
check()
document()
check()
document()
check()
document()
check()
library(JPackage)
