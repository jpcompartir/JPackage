dplyr::group_split(name)%>%
purrr::map(unnest, cols = data)%>%
purrr::map(count, value, sort = TRUE)%>%
purrr::map(mutate, percent = 100 * n / sum(n))
}
umap_shiny %>%
count_multiple(sentiment, brand)
data %>%
count_multiple(sentiment, brand)
data %>%
select(brand, sentiment) %>%
pivot_longer()
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything())
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
distinct(name)
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
mutate(list_name = brand)
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
mutate(list_name = name)
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
mutate(list_name = name) %>%
group_by(name)
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
mutate(list_name = name) %>%
group_by(name) %>%
nest()
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
mutate(list_name = name) %>%
group_by(name) %>%
nest() %>%
ungroup()
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
mutate(list_name = name) %>%
group_by(name) %>%
nest() %>%
ungroup() %>%
group_split(name)
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
mutate(list_name = name) %>%
group_by(name) %>%
nest() %>%
ungroup() %>%
group_split(name) %>%
map(., ~ .x %>% unnest(cols = data) %>%
count(value, sort = TRUE)%>%
mutate(percent = 100 * n / sum(n)))
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
mutate(list_name = name) %>%
group_by(name) %>%
nest() %>%
ungroup() %>%
group_split(name) %>%
map(., ~ .x %>% unnest(cols = data) %>%
count(name,value, sort = TRUE)%>%
mutate(percent = 100 * n / sum(n)))
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
mutate(list_name = name) %>%
group_by(name) %>%
ungroup() %>%
group_split(name) %>%
map(., ~ .x %>% unnest(cols = data) %>%
count(name,value, sort = TRUE)%>%
mutate(percent = 100 * n / sum(n)))
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
mutate(list_name = name) %>%
group_by(name) %>%
nest() %>%
ungroup() %>%
group_split(name) %>%
map(., ~ .x %>% unnest(cols = data) %>%
count(name,value, sort = TRUE)%>%
mutate(percent = 100 * n / sum(n)))
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
mutate(list_name = name) %>%
group_by(name) %>%
nest() %>%
ungroup() %>%
group_split(name) %>%
map(., ~ .x %>% unnest(cols = data) %>%
count(name,value, sort = TRUE)%>%
mutate(percent = 100 * n / sum(n)) %>%
setNames(name))
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
group_by(name) %>%
nest() %>%
ungroup() %>%
group_split(name) %>%
map(., ~ .x %>% unnest(cols = data) %>%
count(name,value, sort = TRUE)%>%
mutate(percent = 100 * n / sum(n)))
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
group_by(name) %>%
nest() %>%
ungroup() %>%
group_split(name) %>%
map(., ~ .x %>% unnest(cols = data) %>%
count(name,value, sort = TRUE)%>%
mutate(percent = 100 * n / sum(n))) %>%
setNames(distinct(name))
data %>%
select(brand, sentiment) %>%
pivot_longer(cols = everything()) %>%
group_by(name) %>%
nest() %>%
ungroup() %>%
group_split(name) %>%
map(., ~ .x %>% unnest(cols = data) %>%
count(name,value, sort = TRUE)%>%
mutate(percent = 100 * n / sum(n))) %>%
map(., ~ .x %>% setNames(distinct(name)))
list <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())%>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(unnest, cols = data)%>%
purrr::map(count, value, sort = TRUE)%>%
purrr::map(mutate, percent = 100 * n / sum(n))
count_multiple <- function(df, ...){
dots <- enquos(...)
list <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())%>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(unnest, cols = data)%>%
purrr::map(count, value, sort = TRUE)%>%
purrr::map(mutate, percent = 100 * n / sum(n))
names(list) <- dots
list
}
data %>%
count_multiple(sentiment, brand)
count_multiple <- function(df, ...){
dots <- enquos(...)
list <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())%>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(unnest, cols = data)%>%
purrr::map(count, value, sort = TRUE)%>%
purrr::map(mutate, percent = 100 * n / sum(n))
names(list) <- !!!dots
list
}
data %>%
count_multiple(sentiment, brand)
count_multiple <- function(df, ...){
dots <- enquos(list(...))
list <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())%>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(unnest, cols = data)%>%
purrr::map(count, value, sort = TRUE)%>%
purrr::map(mutate, percent = 100 * n / sum(n))
names(list) <- dots
list
}
data %>%
count_multiple(sentiment, brand)
count_multiple <- function(df, ...){
dots <- enquos(list(...))
list <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())%>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(unnest, cols = data)%>%
purrr::map(count, value, sort = TRUE)%>%
purrr::map(mutate, percent = 100 * n / sum(n))
names(list) <- unlistdots
list
}
data %>%
count_multiple(sentiment, brand)
count_multiple <- function(df, ...){
dots <- enquos(...)
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% distinct(name) %>% pull(1)
list_output <- df %>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(unnest, cols = data)%>%
purrr::map(count, value, sort = TRUE)%>%
purrr::map(mutate, percent = 100 * n / sum(n))
names(list_output) <- list_names
return(list_output)
}
count_multiple <- function(df, ...){
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% distinct(name) %>% pull(1)
list_output <- df %>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(unnest, cols = data)%>%
purrr::map(count, value, sort = TRUE)%>%
purrr::map(mutate, percent = 100 * n / sum(n))
names(list_output) <- list_names
return(list_output)
}
data %>%
count_multiple(sentiment, brand)
count_multiple <- function(df, ...){
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- !duplicated(df$name)
list_output <- df %>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(unnest, cols = data)%>%
purrr::map(count, value, sort = TRUE)%>%
purrr::map(mutate, percent = 100 * n / sum(n))
names(list_output) <- list_names
return(list_output)
}
data %>%
count_multiple(sentiment, brand)
count_multiple <- function(df, ...){
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% distinct(name) %>% pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(unnest, cols = data)%>%
purrr::map(count, value, sort = TRUE)%>%
purrr::map(mutate, percent = 100 * n / sum(n))
names(list_output) <- list_names
return(list_output)
}
data %>%
count_multiple(sentiment, brand)
?distinct
data %>%
count_multiple(sentiment, brand)
#' Count multiple factors
#'
#' @param df Data frame and tibble object
#' @param ... The variables you want to create individual tables for - unquoted.
#'
#' @return Summary frames which separately count inputted variables and add a percent column
#' @export
#'
count_multiple <- function(df, ...){
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(unnest, cols = data)%>%
purrr::map(count, value, sort = TRUE)%>%
purrr::map(mutate, percent = 100 * n / sum(n))
names(list_output) <- list_names
return(list_output)
}
rm(list=ls())
library(JPackage)
library(shiny)
library(JPackage)
library(bslib)
library(shinythemes)
data <- read_csv("~/Google Drive/My Drive/Data Science Project Work/Microsoft/Project Work/551_sustainability/data/brands_cleaning_umap_df.csv")
data %>%
count_multiple(sentiment, brand)
data
data %>%
count_multiple(sentiment, brand, cluster)
data %>%
mutate(colour = c("red")) %>%
count_multiple(sentiment, brand, colour)
#' Count multiple factors
#'
#' @param df Data frame and tibble object
#' @param ... The variables you want to create individual tables for - unquoted.
#'
#' @return Summary frames which separately count inputted variables and add a percent column
#' @export
#'
count_multiple <- function(df, ...){
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(., ~ .x %>% tidyr::unnest(cols = data)%>%
dplyr::count(value, sort = TRUE) %>%
dplyr::mutate(percent = 100 * n / sum(n)))
names(list_output) <- list_names
return(list_output)
}
data %>%
mutate(colour = c("red")) %>%
count_multiple(sentiment, brand, colour)
rm(list=ls())
document()
#' Count multiple factors
#'
#' @param df Data frame and tibble object
#' @param ... The variables you want to create individual tables for - unquoted.
#'
#' @return Summary frames which separately count inputted variables and add a percent column
#' @export
#'
count_multiple <- function(df, ...){
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_by(name)%>%
tidyr::nest()%>%
dplyr::ungroup()%>%
dplyr::group_split(name)%>%
purrr::map(., ~ .x %>% tidyr::unnest(cols = data)%>%
dplyr::count(value, sort = TRUE) %>%
dplyr::mutate(percent = 100 * n / sum(n)))
names(list_output) <- list_names
return(list_output)
}
ParseR::sprinklr_export
ParseR::sprinklr_export %>%
janitor::clean_names()
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
count_multiple(social, sender_screen_name, sentiment)
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
count_multiple(social_network, sender_screen_name, sentiment)
#' Count multiple factors
#'
#' @param df Data frame and tibble object
#' @param ... The variables you want to create individual tables for - unquoted.
#'
#' @return Summary frames which separately count inputted variables and add a percent column
#' @export
#'
count_multiple <- function(df, ...){
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_split(name)%>%
purrr::map(., ~ .x %>% tidyr::unnest(cols = data)%>%
dplyr::count(value, sort = TRUE) %>%
dplyr::mutate(percent = 100 * n / sum(n)))
names(list_output) <- list_names
return(list_output)
}
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
count_multiple(social_network, sender_screen_name, sentiment)
#' Count multiple factors
#'
#' @param df Data frame and tibble object
#' @param ... The variables you want to create individual tables for - unquoted.
#'
#' @return Summary frames which separately count inputted variables and add a percent column
#' @export
#'
count_multiple <- function(df, ...){
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_split(name)%>%
purrr::map(., ~ .x %>%
dplyr::count(value, sort = TRUE) %>%
dplyr::mutate(percent = 100 * n / sum(n)))
names(list_output) <- list_names
return(list_output)
}
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
count_multiple(social_network, sender_screen_name, sentiment)
document()
rm(list=ls())
document()
#' Count multiple factors
#'
#' @param df Data frame and tibble object
#' @param ... The variables you want to create individual tables for - unquoted.
#'
#' @return Summary frames which separately count inputted variables and add a percent column
#' @export
#'
count_multiple <- function(df, ...){
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_split(name)%>%
purrr::map(., ~ .x %>%
dplyr::count(value, sort = TRUE) %>%
dplyr::mutate(percent = 100 * n / sum(n)))
names(list_output) <- list_names
return(list_output)
}
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
count_multiple(social_network, sender_screen_name, sentiment)
#' Count multiple factors
#'
#' @param df Data frame and tibble object
#' @param ... The variables you want to create individual tables for - unquoted.
#'
#' @return Summary frames which separately count inputted variables and add a percent column
#' @export
#'
my_count_multiple <- function(df, ...){
df <- df %>%
dplyr::select(...)%>%
tidyr::pivot_longer(cols = everything())
list_names <- df %>% dplyr::distinct(name) %>% dplyr::pull(1)
list_names <- sort(list_names)
list_output <- df %>%
dplyr::group_split(name)%>%
purrr::map(., ~ .x %>%
dplyr::count(value, sort = TRUE) %>%
dplyr::mutate(percent = 100 * n / sum(n)))
names(list_output) <- list_names
return(list_output)
}
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
my_count_multiple(social_network, sender_screen_name, sentiment)
library(JPackage)
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
JPackage::my_count_multiple(social_network, sender_screen_name, sentiment)
ParseR::sprinklr_export %>%
janitor::clean_names() %>%
JPackage::count_multiple(social_network, sender_screen_name, sentiment)
library(devtools)
library(roxygen2)
#roxygenise(clean = TRUE)
document()
library(JPackage)
